#!/bin/bash
# TODO: Put git-awareness into prompt_command.
# TODO: Make prompt_command render two lines for a set of functions to
# provide what's-going-on messages. Perhaps this, above the prompt line:
# skr@montenegriner 11:25 ~ 0 human_pleasantly_box <<< "■ message 1    ■ message 2"
# ┌───────────────────────────┐
# │■ message 1    ■ message 2 │
# └───────────────────────────┘

# Can't let domains slip into github'ed stuff, so working around:
sha1of_domain="$(hostname --domain | sha1sum | cut -d\  -f1)"

if grep -qF $'7ad2097bf738491a6f32bd8bfd754f9a2ccb7490\n109232fc14b9343ee992ed025da46d0ad8ca1018' <<< "$sha1of_domain"; then
  basedigit=5
elif grep -qF $'f788a971e2a58b4559dbeb8b6028c588f173cb6f\nead5a4d48fbef658ecbd0130a8833255f91f3fc4' <<< "$sha1of_domain"; then
  basedigit=2
elif [ -n "$(hostname --domain)" ]; then
  basedigit=6 # Somewhere else where the machines know of their domains.
else
  basedigit=1
fi
# root_basedigit probably should be 1 (red):
root_basedigit=1

export prompt_line_offset=5
export prompt_color=3
# inspired by http://stackoverflow.com/a/2774197
#col=( [reset]="$(tput sgr0)" [bold]="$(tput smso)" [invred]=$'\e[41m' [red]=$'\e[31m' [green]="$(tput setaf 2)")
#col_reset="$(tput sgr0)"
#col_bold="$(tput smso)"
col_reset=$'\e[0m'
col_bold=$'\e[1m'
col_underline=$'\e[4m'
col_invred=$'\e[41m'
col_red=$'\e[31m'
col_green=$'\e[32m'
col_grey=$'\e[30;1m'

if [ "0" != "$UID" ]; then
  col_base=$'\e['"3${basedigit}m"
  col_invbase=$'\e['"4${basedigit}m"
else
  col_base=$'\e['"3${root_basedigit}m"
  col_invbase=$'\e['"4${root_basedigit}m"
fi

function set_title ()
{ # {{{
  local word_blacklist=$'vim\nbash\nhistory\nsed\nsort\ntail\necho\negrep\ngrep'
  local words="$(HISTTIMEFORMAT="" history | sed -re "s/^\s*[0-9]*\s*//"  | uniq | tail -n60 | tr " " "\n" | sort -u | egrep '^[A-Za-z0-9_-]+$' | grep -vF "$word_blacklist" | uniq | tr "\n" " " | cut -b 1-200)"
  printf "\e]0;$USER@$HOSTNAME: $words\007"
} # }}}
last_motd_modtimes=( $(date +%s) $(date +%s) )
motd_files_to_bashprompt_check=( "/etc/motd" "/etc/motd.local" )
function check_motd_updates ()
{ # {{{
  local render_width="$( (( 120 > COLUMNS )) && echo "$COLUMNS" || echo 120)"
  local lotsofequals="$(seq 1 $render_width | tr -d '0-9' | tr "\n" "=")"
  for index in "${!motd_files_to_bashprompt_check[@]}"; do
    motd_file_to_bashprompt_check="${motd_files_to_bashprompt_check[$index]}"
    [ -r "$motd_file_to_bashprompt_check" ] || continue
    [ -n "$(< $motd_file_to_bashprompt_check)" ] || continue
    local cur_motd_update_time="$(stat -c%Y "$motd_file_to_bashprompt_check")"
    if [ "${last_motd_modtimes[$index]}" -lt "$cur_motd_update_time" ]; then
      # Filter out I've-seen-this-a-million-times motd's.
      if ! grep -qF $'9830e3dbb6a828f2cc824db8db0ceaf7' <<< "$(md5sum "$motd_file_to_bashprompt_check")"; then
        human_pleasantly_box --width "$((COLUMNS/2))" --text-colour 32 --header-colour 31 --border-colour 32 \
          --header "$motd_file_to_bashprompt_check updated $(date --date "@$cur_motd_update_time" +%F-%T):" \
          < "$motd_file_to_bashprompt_check"
        #while read line; do
        #  printf "\e[32m > \e[0m%-$((render_width-10))s\e[32m < \e[0m\n" "$line" >&2
        #done <<< "$(< "$motd_file_to_bashprompt_check")"
        #printf "\e[32m > %-$((render_width-10)).$((render_width-10))s < \e[0m\n" "$lotsofequals" >&2
      fi
    fi
    last_motd_modtimes[$index]="$cur_motd_update_time"
  done
} # }}}
function human_readable_duration ()
{ # {{{
  local -A split intervals=( [d]=86400 [h]=3600 [m]=60 [s]=1 )
  local rest="$1"
  for i_name in "${!intervals[@]}"; do
    split["$i_name"]=$(($rest / ${intervals[$i_name]} ))
    rest=$((rest - ${split[$i_name]} * ${intervals[$i_name]} ))
  done
  for i_name in "${!intervals[@]}"; do
    [ "0" = "${split[$i_name]}" ] || echo -n "${split[$i_name]}$i_name"
  done
  echo

} # }}}
function human_pleasantly_box ()
{ # {{{
  local border_colour=$'\e[0m'
  local text_colour=$'\e[0m'
  local header_colour=$'\e[0m'
  local width="0"
  local header=""
  while [ "$#" != "0" ]; do # <- needs to be ``while [ "$#" != "0" ]; do'' exactly.
    case "$1" in
      # Poor man's dynamic --help (note code dependency):
      --help) echo -e "Supposedly, $FUNCNAME bash-parses for:\n" 1>&2; type $FUNCNAME | sed -rn '/while \[ "\$\#" != "0" \]/,/^\s*done;/ {/^\s*(--|\*)/ {s/^\s*//;s/[|)]//g;p}}' 1>&2; return 0;;


      --border-color|--border-colour|--frame-colour|--frame-color) border_colour=$'\e'"[${2}m"; shift ;;
      --width)                        width="$(($2 - 2))";         shift ;;
      --header)                       header="$2";                 shift ;;
      --text-color|--text-colour)     text_colour=$'\e'"[${2}m";   shift ;;
      --header-color|--header-colour) header_colour=$'\e'"[${2}m"; shift ;;
      *|--help:[error-out]) echo "No, not recognized to $FUNCNAME(): \"${1}\". Aborting." >&2; return 1 ;;
    esac
    shift
  done
  local text="$(cat)"
  local width_of_text="$( while read line; do wc -m <<< "$line"; done <<< "$header"$'\n'"$text" | sort -rnu | head -1)"
  (( width_of_text <= width )) || width="$width_of_text"

  echo -n "${border_colour}┌"; for ((i=0;i<width;i++)); do echo -n "─"; done; echo $'┐\e[0m';
  if [ -n "$header" ]; then
    while read line; do
        printf "\e[0m${border_colour}│\e[0m${header_colour}%-${width}s"$'\e[0m'"${border_colour}│\e[0m\n" "$line"
    done <<< "$header"
    echo -en "\e[0m${border_colour}┝"; for ((i=0;i<width;i++)); do echo -n "━"; done; echo $'┥\e[0m';
  fi
  while read line; do
    # This hacks (safely?--can't figure that out) around multi-byte chars.
    # bash's printf doesn't deal with them, so we can work around here.
    # See http://wiki.bash-hackers.org/commands/builtin/printf#differences_from_c_and_portability_considerations
    thisaddition="$(( $(wc -c <<< "$line")-$(wc -m <<< "$line") ))"
    printf "${border_colour}│${text_colour}%-$((width+thisaddition))s"$'\e[0m'"${border_colour}│\e[0m\n" "$line"
  done <<< "$text"
  echo -n "${border_colour}└"; for ((i=0;i<width;i++)); do echo -n "─"; done; echo $'┘\e[0m';
} # }}}

# Starts all registered ``floats'', i.e. background processes of the shell
# pid's are stored in $floats_pids---should be accessible from the shell
function start_floats()
{ # {{{
  for floatname in "${!float_functions_and_intervals[@]}"; do
    local delay="${float_functions_and_intervals[$floatname]}"
    if ! egrep -q "^[0-9]+$" <<< "$delay"; then
      echo "Not a valid delay: $delay; ignoring." >&2
      continue
    fi
    while true; do eval "$floatname"; sleep "$delay"; done &
    floats_pids["$floatname"]="$!"
  done
} # }}}
function stop_floats()
{ # {{{
  for floatname in "${!float_functions_and_intervals[@]}"; do
    echo ">>> Killing float $floatname supposedly with pid ${floats_pids[$floatname]}...">&2
    kill "${floats_pids[$floatname]}"
    floats_pids["$floatname"]=""
  done
} # }}}

function render_floating_uptime()
{ # {{{
  content="$(echo -e "$(uptime)")"
  echo -ne "\033[s\033[0;0H$(human_pleasantly_box <<< "$content")\033[u\e[0m"
} # }}}


function place_cursor_at_bottom_line()
{ # {{{
  echo -ne "\033[${LINES}B"
} # }}}

function render_name ()
{ # {{{
  local rendername="${USER:0:3}"
  if [ "0" != "$UID" ]; then
    echo -n "\[$col_base\]$rendername\[$col_reset\]"
  else
    echo -n "\[$col_base\]\[$col_bold\]\[$col_underline\]$rendername\[$col_reset\]"
  fi
} # }}}
function render_hostname ()
{ # {{{
  echo -n "@\[$col_base\]${HOSTNAME%%.*}\[$col_reset\]"
} # }}}
function render_time ()
{ # {{{
  echo -n " \[$col_base\]$(date +%H)\[$col_reset\]:\[$col_base\]$(date +%M)\[$col_reset\]"
} # }}}
function render_pwd ()
{ # {{{
  echo -n " \[$col_base\]$(pwd | sed -e "s|$HOME|~|")\[$col_reset\]"
} # }}}
function render_battery_when_discharging ()
{ # {{{
  which acpi >& /dev/null || return
  time_remaining="$(acpi 2>/dev/null | sed -nre "s/.* 0?([0-9]*:[0-9]{2})[0-9:]* remaining$/\1/;tp;b;:p p")"
  batt_percentage="$(acpi 2>/dev/null | sed -nre "s/^.* ([0-9]{1,3})%,.*$/\1/;tp;b;:p p")"
  is_discharging="$(acpi 2>/dev/null | grep -F Discharging || true)"
  if [ -n "$is_discharging" ]; then
    if ((20 > batt_percentage)) ; then
      echo -n " \["$'\e[31;4m'"\][b@${batt_percentage}%]\[$col_reset\]"
    elif ((40 > batt_percentage)) ; then
      echo -n " \["$'\e[33m'"\][b@${batt_percentage}%]\[$col_reset\]"
    else
      echo -n " \["$'\e[32m'"\][b@${batt_percentage}%]\[$col_reset\]"
    fi
  fi
} # }}}
function render_any_git_branch ()
{ # {{{
  local branchname="$(git branch -q 2>/dev/null | sed -n "s/^\* \(.*\)$/\1/;tp;b;:p p")"
  if [ -n "$branchname" ]; then
    echo -n " \[$col_grey\][\[$col_reset\]\[$col_underline\]\[$([ "master" = "$branchname" ] && echo -n "$col_red" || echo -n "$col_base")\]$branchname\[$col_reset\]\[$col_grey\]]\[$col_reset\]"
  fi
} # }}}
bashprompt_last_command_ran_at_epoch="$(date +%s)"
function update_bashprompt_last_command_ran_at_epoch ()
{ # {{{
  bashprompt_last_command_ran_at_epoch="$(date +%s)"
} # }}}
function render_long_delay_since_last_command ()
{ # {{{
  if (( $(date +%s) - bashprompt_last_command_ran_at_epoch > 3600 )); then
    echo -e "${col_base}\e[1m■\e[22m Last prompt \"\e[0m$(date -d "@$bashprompt_last_command_ran_at_epoch" +%H:%M)${col_base}\" above is \e[0m$(date -d "@$bashprompt_last_command_ran_at_epoch" +%F\ %T)${col_base}      ◔ \e[0m$(human_readable_duration "$(($(date +%s) - $bashprompt_last_command_ran_at_epoch))")${col_base} ago (now's \e[0m$(date +%F)${col_base}\e[1m\e[22m)\e[0m"
  fi
} # }}}


function render_no_ssh_profiles ()
{ # {{{
  [ -x /usr/bin/ssh-add ] || return
  num_profiles="$(/usr/bin/ssh-add -l | grep -vF "The agent has no identities" | wc -l)"
  if [ "0" = "$num_profiles" ]; then
    echo -n "\[$col_invred$col_bold\][no ssh keys]\[$col_reset\] "
  fi
} # }}}

function render_retval ()
{ # {{{
  if [ "$last_dollar_questionmark" != 0 ]; then
    echo -en ' \[\e[31;1m'
  else
    echo -en ' \[\e[32;1m'
  fi
  #echo '\]'"$([ "$last_dollar_questionmark" = 0 ] && echo '\$' || echo "($last_dollar_questionmark) \\$")"'\[\e[0m\] '
  echo '\]'"$last_dollar_questionmark"'\[\e[0m\] '
} # }}}

# Put more into here, if needed. May output newlines etc if so called for.
declare last_dollar_questionmark=0
if [ -z "${functions_to_call_pre_prompt:+x}" ]; then
  declare -a functions_to_call_pre_prompt=()
fi
  functions_to_call_pre_prompt+=( set_title check_motd_updates render_long_delay_since_last_command )
if [ -z "${functions_to_render_prompt:+x}" ]; then
  declare -a functions_to_render_prompt=()
fi
if [ -z "${float_functions_and_intervals:+x}" ]; then
  declare -A float_functions_and_intervals
fi
float_functions_and_intervals=(\
  [render_floating_uptime]="1"  \
)
functions_to_render_prompt+=( render_name render_hostname render_time render_pwd render_battery_when_discharging render_any_git_branch render_retval )
functions_to_call_post_prompt=( update_bashprompt_last_command_ran_at_epoch )

function skrewz_get_cursor_position ()
{ # {{{
  # http://stackoverflow.com/a/2575525 as inspiration:
  # skrewz@20141026: Seems to always output ``^[0-9]+:1$''?
  local curpos;
  exec < /dev/tty
  local oldstty="$(stty -g)"
  stty raw -echo min 0

  echo -en "\e[6n" > /dev/tty
  read -sdR curpos
  curpos="${curpos#*[}"
  curpos="${curpos//;/:}"
  stty "$oldstty"
  echo "$curpos"
} # }}}

function skrewz_prompt_command ()
{ # {{{
  for functionname in "${functions_to_call_pre_prompt[@]}"; do
    $functionname
  done
  export PS1="$(skrewz_prompt_rendering_command)"
  for functionname in "${functions_to_call_post_prompt[@]}"; do
    $functionname
  done
  #echo >&2
  #echo "PS1 is now (as rendered) \"$PS1\"" >&2
  #echo "PS1 is now (cat -A'ed)   \"$(cat -A <<< "$PS1")\"" >&2
  #echo "PS1 is now   (xxd'ed):   \"$(xxd <<< "$PS1")\"" >&2
  #echo >&2
} # }}}
function skrewz_prompt_rendering_command ()
{ # {{{
  PS1=''
  for functionname in "${functions_to_render_prompt[@]}"; do
    $functionname
  done
  #echo >&2
  ##echo "PS1 is now (as rendered) \"$PS1\"" >&2
  #echo "PS1 is now (cat -A'ed)   \"$(cat -A <<< "$PS1")\"" >&2
  ##echo "PS1 is now   (xxd'ed):   \"$(xxd <<< "$PS1")\"" >&2
  #echo >&2
} # }}}
export -f set_title skrewz_prompt_command skrewz_prompt_rendering_command

# These together render the prompt. The PS1 has to be used 
export PROMPT_COMMAND='last_dollar_questionmark=$?; skrewz_prompt_command'
#start_floats

# vim: fdm=marker fml=1
