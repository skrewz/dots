#!/bin/bash
# basedigit sets the major color:

# Can't let domains slip into github'ed stuff, so working around:
sha1of_domain="$(hostname --domain | sha1sum | cut -d\  -f1)"

if grep -qF $'7ad2097bf738491a6f32bd8bfd754f9a2ccb7490\n109232fc14b9343ee992ed025da46d0ad8ca1018' <<< "$sha1of_domain"; then
  basedigit=5
elif grep -qF $'f788a971e2a58b4559dbeb8b6028c588f173cb6f\nead5a4d48fbef658ecbd0130a8833255f91f3fc4' <<< "$sha1of_domain"; then
  basedigit=2
elif [ -n "$(hostname --domain)" ]; then
  basedigit=1 # Somewhere else where the machines know of their domains.
else
  basedigit=6
fi
# root_basedigit probably should be 1 (red):
root_basedigit=1

export prompt_color=3
# inspired by http://stackoverflow.com/a/2774197
#col=( [reset]="$(tput sgr0)" [bold]="$(tput smso)" [invred]=$'\e[41m' [red]=$'\e[31m' [green]="$(tput setaf 2)")
col_reset="$(tput sgr0)"
col_bold="$(tput smso)"
col_invred=$'\e[41m'
col_red=$'\e[31m'
col_green="$(tput setaf 2)"

if [ "0" != "$UID" ]; then
  col_base=$'\e['"3${basedigit}m"
  col_invbase=$'\e['"4${basedigit}m"
else
  col_base=$'\e['"3${rootbasedigit}m"
  col_invbase=$'\e['"4${rootbasedigit}m"
fi

function set_title ()
{ # {{{
  local word_blacklist=$'vim\nbash\nhistory\nsed\nsort\ntail\necho\negrep\ngrep'
  local words="$(HISTTIMEFORMAT="" history | sed -re "s/^\s*[0-9]*\s*//"  | uniq | tail -n60 | tr " " "\n" | sort -u | egrep '^[A-Za-z0-9_.-]+$' | grep -vF "$word_blacklist" | sort -u | tr "\n" " ")"
  printf "\e]0;$USER@$HOSTNAME: $words\007"
} # }}}
last_motd_modtimes=( 0 0 )
motd_files_to_bashprompt_check=( "/etc/motd" "/etc/motd.local" )
function check_motd_updates ()
{ # {{{
  local render_width="$( (( 120 > COLUMNS )) && echo "$COLUMNS" || echo 120)"
  local lotsofequals="$(seq 1 $render_width | tr -d '0-9' | tr "\n" "=")"
  for index in "${!motd_files_to_bashprompt_check[@]}"; do
    motd_file_to_bashprompt_check="${motd_files_to_bashprompt_check[$index]}"
    [ -r "$motd_file_to_bashprompt_check" ] || continue
    [ -n "$(< $motd_file_to_bashprompt_check)" ] || continue
    local cur_motd_update_time="$(stat -c%Y "$motd_file_to_bashprompt_check")"
    if [ "${last_motd_modtimes[$index]}" -lt "$cur_motd_update_time" ]; then
      printf "\e[32m > %-$((render_width-10)).$((render_width-10))s < \e[0m\n" "$motd_file_to_bashprompt_check updated @ $(date --date "@$cur_motd_update_time" +%F-%T).  $lotsofequals" >&2
      while read line; do
        printf "\e[32m > \e[0m%-$((render_width-10))s\e[32m < \e[0m\n" "$line" >&2
      done <<< "$(< "$motd_file_to_bashprompt_check")"
      printf "\e[32m > %-$((render_width-10)).$((render_width-10))s < \e[0m\n" "$lotsofequals" >&2
    fi
    last_motd_modtimes[$index]="$cur_motd_update_time"
  done
} # }}}

function render_name ()
{ # {{{
  echo -n "\[$col_base\]$USER\[$col_reset\]"
  #echo -n "$USER"
} # }}}
function render_hostname ()
{ # {{{
  echo -n "@\[$col_base\]${HOSTNAME%%.*}\[$col_reset\]"
} # }}}
function render_time ()
{ # {{{
  echo -n " \[$col_base\]$(date +%H)\[$col_reset\]:\[$col_base\]$(date +%M)\[$col_reset\]"
} # }}}
function render_pwd ()
{ # {{{
  echo -n " \[$col_base\]$(pwd | sed -e "s|$HOME|~|")\[$col_reset\]"
} # }}}
function render_low_battery_when_discharging ()
{ # {{{
  which acpi >& /dev/null || return
  time_remaining="$(acpi 2>/dev/null | sed -nre "s/.* 0?([0-9]*:[0-9]{2})[0-9:]* remaining$/\1/;tp;b;:p p")"
  if grep "^0:[1234][0-9]+" <<< "$time_remaining" ; then
    echo -n " \[${col['invred']}\]${time_remaining//:/h}m left\[$col_reset\] "
  fi
} # }}}

function render_retval ()
{ # {{{
  if [ "$last_dollar_questionmark" != 0 ]; then
    echo -en ' \[\e[31;1m'
  else
    echo -en ' \[\e[32;1m'
  fi
  echo '\]\$\[\e[0m\] '
} # }}}

# Put more into here, if needed. May output newlines etc if so called for.
declare last_dollar_questionmark=0
declare -a functions_to_call_pre_prompt=( set_title check_motd_updates )
#declare -a functions_to_render_prompt=( render_name render_time render_pwd render_retval )
declare -a functions_to_render_prompt=( render_name render_hostname render_time render_pwd render_low_battery_when_discharging render_retval )

function skrewz_prompt_command ()
{ # {{{
  for functionname in "${functions_to_call_pre_prompt[@]}"; do
    $functionname
  done
  export PS1="$(skrewz_prompt_rendering_command)"
  #echo >&2
  #echo "PS1 is now (as rendered) \"$PS1\"" >&2
  #echo "PS1 is now (cat -A'ed)   \"$(cat -A <<< "$PS1")\"" >&2
  #echo "PS1 is now   (xxd'ed):   \"$(xxd <<< "$PS1")\"" >&2
  #echo >&2
} # }}}
function skrewz_prompt_rendering_command ()
{ # {{{
  PS1=''
  for functionname in "${functions_to_render_prompt[@]}"; do
    $functionname
  done
  #echo >&2
  ##echo "PS1 is now (as rendered) \"$PS1\"" >&2
  #echo "PS1 is now (cat -A'ed)   \"$(cat -A <<< "$PS1")\"" >&2
  ##echo "PS1 is now   (xxd'ed):   \"$(xxd <<< "$PS1")\"" >&2
  #echo >&2
} # }}}
export -f set_title skrewz_prompt_command skrewz_prompt_rendering_command

# These together render the prompt. The PS1 has to be used 
export PROMPT_COMMAND="last_dollar_questionmark=$?; skrewz_prompt_command"

# vim: fdm=marker fml=1
